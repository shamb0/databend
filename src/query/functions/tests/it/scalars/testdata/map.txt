ast            : map([], [])
raw expr       : map(array(), array())
checked expr   : map<Array(Nothing), Array(Nothing)>(array<>(), array<>())
optimized expr : {} :: Map(Nothing)
output type    : Map(Nothing)
output domain  : {}
output         : {}


ast            : map([1,2], ['a','b'])
raw expr       : map(array(1, 2), array('a', 'b'))
checked expr   : map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0>(1_u8, 2_u8), array<T0=String><T0, T0>("a", "b"))
optimized expr : {1_u8:"a", 2_u8:"b"}
output type    : Map(UInt8, String)
output domain  : {[{1..=2}], [{"a"..="b"}]}
output         : {1:'a', 2:'b'}


ast            : map(['k1','k2','k3'], ['v1','v2','v3'])
raw expr       : map(array('k1', 'k2', 'k3'), array('v1', 'v2', 'v3'))
checked expr   : map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("k1", "k2", "k3"), array<T0=String><T0, T0, T0>("v1", "v2", "v3"))
optimized expr : {"k1":"v1", "k2":"v2", "k3":"v3"}
output type    : Map(String, String)
output domain  : {[{"k1"..="k3"}], [{"v1"..="v3"}]}
output         : {'k1':'v1', 'k2':'v2', 'k3':'v3'}


error: 
  --> SQL:1:1
  |
1 | map(1, 'a')
  | ^^^^^^^^^^^ no overload satisfies `map(UInt8, String)`

has tried possible overloads:
  map(Array(Nothing), Array(Nothing)) :: Map(Nothing)                 : unable to unify `UInt8` with `Array(Nothing)`
  map(Array(Nothing) NULL, Array(Nothing) NULL) :: Map(Nothing) NULL  : unable to unify `UInt8` with `Array(Nothing)`
  map(Array(T0), Array(T1)) :: Map(T0, T1)                            : unable to unify `UInt8` with `Array(T0)`
  map(Array(T0) NULL, Array(T1) NULL) :: Map(T0, T1) NULL             : unable to unify `UInt8` with `Array(T0)`



error: 
  --> SQL:1:1
  |
1 | map(['k1','k2'], ['v1','v2','v3'])
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ key list has a different size from value list (2 keys, 3 values) while evaluating function `map(['k1', 'k2'], ['v1', 'v2', 'v3'])`



error: 
  --> SQL:1:1
  |
1 | map(['k1','k1'], ['v1','v2'])
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ map keys have to be unique while evaluating function `map(['k1', 'k1'], ['v1', 'v2'])`



ast            : map([a_col, b_col, c_col], [d_col, e_col, f_col])
raw expr       : map(array(a_col::Int8, b_col::Int8, c_col::Int8), array(d_col::String NULL, e_col::String NULL, f_col::String NULL))
checked expr   : map<T0=Int8, T1=String NULL><Array(T0), Array(T1)>(array<T0=Int8><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col))
evaluation:
+--------+---------+---------+---------+-------------+---------------------+---------------------+------------------------+
|        | a_col   | b_col   | c_col   | d_col       | e_col               | f_col               | Output                 |
+--------+---------+---------+---------+-------------+---------------------+---------------------+------------------------+
| Type   | Int8    | Int8    | Int8    | String NULL | String NULL         | String NULL         | Map(Int8, String NULL) |
| Domain | {1..=3} | {4..=6} | {7..=9} | {"a"..="c"} | {""..="e"} ∪ {NULL} | {""..="g"} ∪ {NULL} | Unknown                |
| Row 0  | 1       | 4       | 7       | 'a'         | 'd'                 | 'f'                 | {1:'a', 4:'d', 7:'f'}  |
| Row 1  | 2       | 5       | 8       | 'b'         | 'e'                 | NULL                | {2:'b', 5:'e', 8:NULL} |
| Row 2  | 3       | 6       | 9       | 'c'         | NULL                | 'g'                 | {3:'c', 6:NULL, 9:'g'} |
+--------+---------+---------+---------+-------------+---------------------+---------------------+------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                       |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | Int8([1, 2, 3])                                                                                                                                                                                                                            |
| b_col  | Int8([4, 5, 6])                                                                                                                                                                                                                            |
| c_col  | Int8([7, 8, 9])                                                                                                                                                                                                                            |
| d_col  | NullableColumn { column: StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }, validity: [0b_____111] }                                                                                                                                  |
| e_col  | NullableColumn { column: StringColumn { data: 0x6465, offsets: [0, 1, 2, 2] }, validity: [0b_____011] }                                                                                                                                    |
| f_col  | NullableColumn { column: StringColumn { data: 0x6667, offsets: [0, 1, 1, 2] }, validity: [0b_____101] }                                                                                                                                    |
| Output | ArrayColumn { values: Tuple([Int8([1, 4, 7, 2, 5, 8, 3, 6, 9]), NullableColumn { column: StringColumn { data: 0x61646662656367, offsets: [0, 1, 2, 3, 4, 5, 5, 6, 6, 7] }, validity: [0b01011111, 0b_______1] }]), offsets: [0, 3, 6, 9] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map(['k1', 'k2'], [a_col, b_col])
raw expr       : map(array('k1', 'k2'), array(a_col::Int8, b_col::Int8))
checked expr   : map<T0=String, T1=Int8><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=Int8><T0, T0>(a_col, b_col))
optimized expr : map<T0=String, T1=Int8><Array(T0), Array(T1)>(['k1', 'k2'], array<T0=Int8><T0, T0>(a_col, b_col))
evaluation:
+--------+---------+---------+-------------------+
|        | a_col   | b_col   | Output            |
+--------+---------+---------+-------------------+
| Type   | Int8    | Int8    | Map(String, Int8) |
| Domain | {1..=3} | {4..=6} | Unknown           |
| Row 0  | 1       | 4       | {'k1':1, 'k2':4}  |
| Row 1  | 2       | 5       | {'k1':2, 'k2':5}  |
| Row 2  | 3       | 6       | {'k1':3, 'k2':6}  |
+--------+---------+---------+-------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                  |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | Int8([1, 2, 3])                                                                                                                                                       |
| b_col  | Int8([4, 5, 6])                                                                                                                                                       |
| Output | ArrayColumn { values: Tuple([StringColumn { data: 0x6b316b326b316b326b316b32, offsets: [0, 2, 4, 6, 8, 10, 12] }, Int8([1, 4, 2, 5, 3, 6])]), offsets: [0, 2, 4, 6] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : map([],[])[1]
raw expr       : get(map(array(), array()), 1)
checked expr   : get<T0=UInt8><Map(Nothing) NULL, T0 NULL>(CAST(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()) AS Map(Nothing) NULL), CAST(1_u8 AS UInt8 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : map([1,2],['a','b'])[1]
raw expr       : get(map(array(1, 2), array('a', 'b')), 1)
checked expr   : get<T0=UInt8, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0>(1_u8, 2_u8), array<T0=String><T0, T0>("a", "b")) AS Map(UInt8, String NULL)), 1_u8)
optimized expr : "a"
output type    : String NULL
output domain  : {"a"..="a"}
output         : 'a'


ast            : map([1,2],['a','b'])[10]
raw expr       : get(map(array(1, 2), array('a', 'b')), 10)
checked expr   : get<T0=UInt8, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0>(1_u8, 2_u8), array<T0=String><T0, T0>("a", "b")) AS Map(UInt8, String NULL)), 10_u8)
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : map(['a','b'],[1,2])['a']
raw expr       : get(map(array('a', 'b'), array(1, 2)), 'a')
checked expr   : get<T0=String, T1=UInt8><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0>("a", "b"), array<T0=UInt8><T0, T0>(1_u8, 2_u8)) AS Map(String, UInt8 NULL)), "a")
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1


ast            : map(['a','b'],[1,2])['x']
raw expr       : get(map(array('a', 'b'), array(1, 2)), 'x')
checked expr   : get<T0=String, T1=UInt8><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0>("a", "b"), array<T0=UInt8><T0, T0>(1_u8, 2_u8)) AS Map(String, UInt8 NULL)), "x")
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : {}['k']
raw expr       : get(map(array(), array()), 'k')
checked expr   : get<T0=String><Map(Nothing) NULL, T0 NULL>(CAST(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()) AS Map(Nothing) NULL), CAST("k" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : {1:NULL}[1]
raw expr       : get(map(array(1), array(NULL)), 1)
checked expr   : get<T0=UInt8><Map(T0, NULL) NULL, T0 NULL>(CAST(map<T0=UInt8, T1=NULL><Array(T0), Array(T1)>(array<T0=UInt8><T0>(1_u8), array<T0=NULL><T0>(NULL)) AS Map(UInt8, NULL) NULL), CAST(1_u8 AS UInt8 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : {'k1':'v1','k2':'v2'}['k1']
raw expr       : get(map(array('k1', 'k2'), array('v1', 'v2')), 'k1')
checked expr   : get<T0=String, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")) AS Map(String, String NULL)), "k1")
optimized expr : "v1"
output type    : String NULL
output domain  : {"v1"..="v1"}
output         : 'v1'


ast            : {'k1':'v1','k2':'v2'}['k3']
raw expr       : get(map(array('k1', 'k2'), array('v1', 'v2')), 'k3')
checked expr   : get<T0=String, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0, T0>("k1", "k2"), array<T0=String><T0, T0>("v1", "v2")) AS Map(String, String NULL)), "k3")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : map([k1,k2],[v1,v2])[1]
raw expr       : get(map(array(k1::Int16, k2::Int16), array(v1::String, v2::String)), 1)
checked expr   : get<T0=Int16, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=Int16, T1=String><Array(T0), Array(T1)>(array<T0=Int16><T0, T0>(k1, k2), array<T0=String><T0, T0>(v1, v2)) AS Map(Int16, String NULL)), to_int16<UInt8>(1_u8))
optimized expr : get<T0=Int16, T1=String><Map(T0, T1 NULL), T0>(CAST(map<T0=Int16, T1=String><Array(T0), Array(T1)>(array<T0=Int16><T0, T0>(k1, k2), array<T0=String><T0, T0>(v1, v2)) AS Map(Int16, String NULL)), 1_i16)
evaluation:
+--------+---------+---------+---------------+---------------+-------------+
|        | k1      | k2      | v1            | v2            | Output      |
+--------+---------+---------+---------------+---------------+-------------+
| Type   | Int16   | Int16   | String        | String        | String NULL |
| Domain | {1..=2} | {3..=4} | {"v1"..="v2"} | {"v3"..="v4"} | Unknown     |
| Row 0  | 1       | 3       | 'v1'          | 'v3'          | 'v1'        |
| Row 1  | 2       | 4       | 'v2'          | 'v4'          | NULL        |
+--------+---------+---------+---------------+---------------+-------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                 |
+--------+------------------------------------------------------------------------------------------------------+
| k1     | Int16([1, 2])                                                                                        |
| k2     | Int16([3, 4])                                                                                        |
| v1     | StringColumn { data: 0x76317632, offsets: [0, 2, 4] }                                                |
| v2     | StringColumn { data: 0x76337634, offsets: [0, 2, 4] }                                                |
| Output | NullableColumn { column: StringColumn { data: 0x7631, offsets: [0, 2, 2] }, validity: [0b______01] } |
+--------+------------------------------------------------------------------------------------------------------+


ast            : map_keys({})
raw expr       : map_keys(map(array(), array()))
checked expr   : map_keys<Map(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : map_keys({'a':1,'b':2,'c':3})
raw expr       : map_keys(map(array('a', 'b', 'c'), array(1, 2, 3)))
checked expr   : map_keys<T0=String, T1=UInt8><Map(T0, T1)>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)))
optimized expr : ['a', 'b', 'c']
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ['a', 'b', 'c']


ast            : map_keys({1:'a',2:'b',3:'c'})
raw expr       : map_keys(map(array(1, 2, 3), array('a', 'b', 'c')))
checked expr   : map_keys<T0=UInt8, T1=String><Map(T0, T1)>(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), array<T0=String><T0, T0, T0>("a", "b", "c")))
optimized expr : [1, 2, 3]
output type    : Array(UInt8)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : map_keys({'a':NULL,'b':2,'c':NULL})
raw expr       : map_keys(map(array('a', 'b', 'c'), array(NULL, 2, NULL)))
checked expr   : map_keys<T0=String, T1=UInt8 NULL><Map(T0, T1)>(map<T0=String, T1=UInt8 NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8 NULL><T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL))))
optimized expr : ['a', 'b', 'c']
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ['a', 'b', 'c']


ast            : map_keys(map([a_col, b_col, c_col], [d_col, e_col, f_col]))
raw expr       : map_keys(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)))
checked expr   : map_keys<T0=String, T1=String NULL><Map(T0, T1)>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)))
evaluation:
+--------+-------------+-------------+-------------+---------------+----------------------+----------------------+-----------------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                | f_col                | Output          |
+--------+-------------+-------------+-------------+---------------+----------------------+----------------------+-----------------+
| Type   | String      | String      | String      | String NULL   | String NULL          | String NULL          | Array(String)   |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {""..="v5"} ∪ {NULL} | {""..="v7"} ∪ {NULL} | Unknown         |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                 | 'v6'                 | ['a', 'd', 'x'] |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                 | NULL                 | ['b', 'e', 'y'] |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                 | 'v7'                 | ['c', 'f', 'z'] |
+--------+-------------+-------------+-------------+---------------+----------------------+----------------------+-----------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                |
+--------+-------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                                                              |
| b_col  | StringColumn { data: 0x646566, offsets: [0, 1, 2, 3] }                                                                              |
| c_col  | StringColumn { data: 0x78797a, offsets: [0, 1, 2, 3] }                                                                              |
| d_col  | NullableColumn { column: StringColumn { data: 0x763176327633, offsets: [0, 2, 4, 6] }, validity: [0b_____111] }                     |
| e_col  | NullableColumn { column: StringColumn { data: 0x76347635, offsets: [0, 2, 4, 4] }, validity: [0b_____011] }                         |
| f_col  | NullableColumn { column: StringColumn { data: 0x76367637, offsets: [0, 2, 2, 4] }, validity: [0b_____101] }                         |
| Output | ArrayColumn { values: StringColumn { data: 0x61647862657963667a, offsets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] }, offsets: [0, 3, 6, 9] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------+


ast            : map_values({})
raw expr       : map_values(map(array(), array()))
checked expr   : map_values<Map(Nothing)>(map<Array(Nothing), Array(Nothing)>(array<>(), array<>()))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : map_values({'a':1,'b':2,'c':3})
raw expr       : map_values(map(array('a', 'b', 'c'), array(1, 2, 3)))
checked expr   : map_values<T0=String, T1=UInt8><Map(T0, T1)>(map<T0=String, T1=UInt8><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8)))
optimized expr : [1, 2, 3]
output type    : Array(UInt8)
output domain  : [{1..=3}]
output         : [1, 2, 3]


ast            : map_values({1:'a',2:'b',3:'c'})
raw expr       : map_values(map(array(1, 2, 3), array('a', 'b', 'c')))
checked expr   : map_values<T0=UInt8, T1=String><Map(T0, T1)>(map<T0=UInt8, T1=String><Array(T0), Array(T1)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), array<T0=String><T0, T0, T0>("a", "b", "c")))
optimized expr : ['a', 'b', 'c']
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ['a', 'b', 'c']


ast            : map_values({'a':NULL,'b':2,'c':NULL})
raw expr       : map_values(map(array('a', 'b', 'c'), array(NULL, 2, NULL)))
checked expr   : map_values<T0=String, T1=UInt8 NULL><Map(T0, T1)>(map<T0=String, T1=UInt8 NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>("a", "b", "c"), array<T0=UInt8 NULL><T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL))))
optimized expr : [NULL, 2, NULL]
output type    : Array(UInt8 NULL)
output domain  : [{0..=2} ∪ {NULL}]
output         : [NULL, 2, NULL]


ast            : map_values(map([a_col, b_col, c_col], [d_col, e_col, f_col]))
raw expr       : map_values(map(array(a_col::String, b_col::String, c_col::String), array(d_col::String NULL, e_col::String NULL, f_col::String NULL)))
checked expr   : map_values<T0=String, T1=String NULL><Map(T0, T1)>(map<T0=String, T1=String NULL><Array(T0), Array(T1)>(array<T0=String><T0, T0, T0>(a_col, b_col, c_col), array<T0=String NULL><T0, T0, T0>(d_col, e_col, f_col)))
evaluation:
+--------+-------------+-------------+-------------+---------------+----------------------+----------------------+--------------------+
|        | a_col       | b_col       | c_col       | d_col         | e_col                | f_col                | Output             |
+--------+-------------+-------------+-------------+---------------+----------------------+----------------------+--------------------+
| Type   | String      | String      | String      | String NULL   | String NULL          | String NULL          | Array(String NULL) |
| Domain | {"a"..="c"} | {"d"..="f"} | {"x"..="z"} | {"v1"..="v3"} | {""..="v5"} ∪ {NULL} | {""..="v7"} ∪ {NULL} | Unknown            |
| Row 0  | 'a'         | 'd'         | 'x'         | 'v1'          | 'v4'                 | 'v6'                 | ['v1', 'v4', 'v6'] |
| Row 1  | 'b'         | 'e'         | 'y'         | 'v2'          | 'v5'                 | NULL                 | ['v2', 'v5', NULL] |
| Row 2  | 'c'         | 'f'         | 'z'         | 'v3'          | NULL                 | 'v7'                 | ['v3', NULL, 'v7'] |
+--------+-------------+-------------+-------------+---------------+----------------------+----------------------+--------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                              |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a_col  | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                                                                                                                                            |
| b_col  | StringColumn { data: 0x646566, offsets: [0, 1, 2, 3] }                                                                                                                                                            |
| c_col  | StringColumn { data: 0x78797a, offsets: [0, 1, 2, 3] }                                                                                                                                                            |
| d_col  | NullableColumn { column: StringColumn { data: 0x763176327633, offsets: [0, 2, 4, 6] }, validity: [0b_____111] }                                                                                                   |
| e_col  | NullableColumn { column: StringColumn { data: 0x76347635, offsets: [0, 2, 4, 4] }, validity: [0b_____011] }                                                                                                       |
| f_col  | NullableColumn { column: StringColumn { data: 0x76367637, offsets: [0, 2, 2, 4] }, validity: [0b_____101] }                                                                                                       |
| Output | ArrayColumn { values: NullableColumn { column: StringColumn { data: 0x7631763476367632763576337637, offsets: [0, 2, 4, 6, 8, 10, 10, 12, 12, 14] }, validity: [0b01011111, 0b_______1] }, offsets: [0, 3, 6, 9] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


